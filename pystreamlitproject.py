{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "9b5b398d-fc19-492c-9ad4-776f3b3f4883",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Logistic Regression Results:\n",
      "Accuracy: 0.945\n",
      "F1 Score: 0.9690140845070423\n",
      "Confusion Matrix:\n",
      " [[ 17  10]\n",
      " [  1 172]]\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.76        27\n",
      "           1       0.95      0.99      0.97       173\n",
      "\n",
      "    accuracy                           0.94       200\n",
      "   macro avg       0.94      0.81      0.86       200\n",
      "weighted avg       0.94      0.94      0.94       200\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "import numpy as np\n",
    "import joblib\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as ex\n",
    "from sklearn.experimental import enable_iterative_imputer\n",
    "from sklearn.impute import SimpleImputer, IterativeImputer, KNNImputer\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.compose import make_column_transformer\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from datetime import datetime, timedelta\n",
    "from sklearn.model_selection import train_test_split\n",
    "from matplotlib.cbook import boxplot_stats\n",
    "import warnings\n",
    "from datetime import datetime, timedelta\n",
    "import random\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "warnings.filterwarnings('ignore')\n",
    "n = 1000\n",
    "def random_date(start, end):\n",
    "    return start + timedelta(days=random.randint(0, (end - start).days))\n",
    "today = datetime.today()\n",
    "start_date = today - timedelta(days=365 * 2)\n",
    "end_date = today\n",
    "np.random.seed(42)\n",
    "data = {\n",
    "    \"NationalCode\": [random.randint(1000000000, 9999999999) for _ in range(n)],\n",
    "    \"Gender\": np.random.choice([\"Male\", \"Female\"], size=n),\n",
    "    \"Tier\": np.random.choice([1, 2, 3, 4, 5], size=n),\n",
    "    \"TotalPurchase\": np.round(np.random.exponential(scale=500000, size=n), 2),\n",
    "    \"Frequency\": np.random.poisson(3, size=n),\n",
    "    \"LongLife\": np.random.randint(100, 500, size=n)\n",
    "}\n",
    "register_dates = [random_date(start_date, end_date - timedelta(days=30)) for _ in range(n)]\n",
    "lottery_dates = [random_date(reg + timedelta(days=1), end_date) for reg in register_dates]\n",
    "data[\"RegisterDate\"] = register_dates\n",
    "data[\"LastLotteryDate\"] = lottery_dates\n",
    "participated_flags = [(lottery - reg).days > 30 for reg, lottery in zip(register_dates, lottery_dates)]\n",
    "data[\"Participated\"] = participated_flags\n",
    "df = pd.DataFrame(data)\n",
    "df[\"Participated\"] = df[\"Participated\"].astype(int)\n",
    "le=LabelEncoder()\n",
    "df['Gender']=le.fit_transform(df['Gender'])\n",
    "df.select_dtypes(include=['datetime64[ns]']).columns\n",
    "df['RegisterDate']=pd.to_datetime(df['RegisterDate'])\n",
    "today=pd.Timestamp.today()\n",
    "df['DaysSinceRegister']=(today-df['RegisterDate']).dt.days\n",
    "df['DaysSinceParticipate']=(today-df['LastLotteryDate']).dt.days\n",
    "df.drop(columns=['RegisterDate','LastLotteryDate'], inplace=True)\n",
    "ohe=OneHotEncoder()\n",
    "rf=RandomForestClassifier()\n",
    "column_transform = make_column_transformer(\n",
    "    (ohe,['Gender' ])\n",
    ")\n",
    "ohe = OneHotEncoder()\n",
    "rf = RandomForestClassifier()\n",
    "\n",
    "column_transform = make_column_transformer(\n",
    "    (ohe, ['Gender']),\n",
    "    remainder='passthrough'\n",
    ")\n",
    "Q1 = df['TotalPurchase'].quantile(0.25)\n",
    "Q3 = df['TotalPurchase'].quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "outliers = df[(df['TotalPurchase'] < Q1 - 1.5*IQR) | (df['TotalPurchase'] > Q3 + 1.5*IQR)]\n",
    "min_threold, max_thresold = df.TotalPurchase.quantile([0.01,0.999])\n",
    "Lower_Limit = df.TotalPurchase-3*df.TotalPurchase.std()\n",
    "Uper_Limit=df.TotalPurchase+3*df.TotalPurchase.std()\n",
    "df_no_outlier_std_dev= df[(df.TotalPurchase<Uper_Limit) & (df.TotalPurchase>Lower_Limit)]\n",
    "x=df.drop(\"Participated\" ,axis=1)\n",
    "y=df[\"Participated\"]\n",
    "x_train, x_test, y_train, y_test = train_test_split(\n",
    "    x,               \n",
    "    y,              \n",
    "    test_size=0.2,  \n",
    "    random_state=42, \n",
    "    stratify=y \n",
    ")\n",
    "model = LogisticRegression()\n",
    "model.fit(x_train, y_train)\n",
    "scaler = StandardScaler()\n",
    "x_train_scaled = scaler.fit_transform(x_train)\n",
    "x_test_scaled = scaler.transform(x_test)\n",
    "log_model = LogisticRegression(max_iter=1000)\n",
    "log_model.fit(x_train_scaled, y_train)\n",
    "y_pred_log = log_model.predict(x_test_scaled)\n",
    "def evaluate(name, y_true, y_pred):\n",
    "    print(f\"\\n{name} Results:\")\n",
    "    print(\"Accuracy:\", accuracy_score(y_true, y_pred))\n",
    "    print(\"F1 Score:\", f1_score(y_true, y_pred))\n",
    "    print(\"Confusion Matrix:\\n\", confusion_matrix(y_true, y_pred))\n",
    "    print(\"Classification Report:\\n\", classification_report(y_true, y_pred))\n",
    "\n",
    "evaluate(\"Logistic Regression\", y_test, y_pred_log)\n",
    "\n",
    "plt.tight_layout()\n",
    "joblib.dump(log_model, 'reg.loot')\n",
    "moddel = joblib.load('reg.loot')"
   ]
  },
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
